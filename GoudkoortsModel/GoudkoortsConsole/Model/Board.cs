//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Model
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class Board
	{
	    public Array boardArray;
	    public LinkedList<BaseTile> tileList0;
        public LinkedList<BaseTile> tileList1;
        public LinkedList<BaseTile> tileList2;
        public LinkedList<BaseTile> tileList3;
        public LinkedList<BaseTile> tileList4;
        public LinkedList<BaseTile> tileList5;
        public LinkedList<BaseTile> tileList6;
        public LinkedList<BaseTile> tileList7;
        public LinkedList<BaseTile> tileList8;

	    public int switchTileCounter = 1;

        //TODO Array en LinkedList
        public Board()
	    {
	        boardArray = new Array[9];
            tileList0 = new LinkedList<BaseTile>();
            tileList1 = new LinkedList<BaseTile>();
            tileList2 = new LinkedList<BaseTile>();
            tileList3 = new LinkedList<BaseTile>();
            tileList4 = new LinkedList<BaseTile>();
            tileList5 = new LinkedList<BaseTile>();
            tileList6 = new LinkedList<BaseTile>();
            tileList7 = new LinkedList<BaseTile>();
            tileList8 = new LinkedList<BaseTile>();
        }

	    public void fillLinkedLists()
        {
            //For array index 0
            for (int i = 0; i < 12; i++)
            {
                var node = new LinkedListNode<BaseTile>(new BaseTile());
                if (i == 0)
                {
                    tileList0.AddFirst(node);
                }
                else
                {
                    tileList0.AddAfter(tileList0.FindLast(node.Value), node);
                }
            }


            //LinkedListNode<BaseTile> tileList0Current;
            //tileList0.First.Value = new BaseTile();
            //tileList0Current = tileList0.First;
            //for (int i = 0; i < 11; i++)
            //{
            //    tileList0Current.Next.Value = new BaseTile();
            //    tileList0Current = tileList0Current.Next;
            //}

            ////For array index 1
            //LinkedListNode<BaseTile> tileList1Current;
            //tileList1.First.Value = new BaseTile();
            //tileList1Current = tileList1.First;
            //for (int i = 0; i < 11; i++)
            //{
            //    if (i == 2)
            //    {
            //        tileList1Current.Next.Value = new DockTile();
            //        tileList1Current = tileList1Current.Next;
            //    }
            //    else
            //    {
            //        tileList1Current.Next.Value = new BaseTile();
            //        tileList1Current = tileList1Current.Next;
            //    }
            //}

            ////For array index 2
            //LinkedListNode<BaseTile> tileList2Current;
            //tileList2.First.Value = null;
            //tileList2Current = tileList2.First;
            //for (int i = 0; i < 11; i++)
            //{
            //    if (i == 11)
            //    {
            //        tileList2Current.Next.Value = new BaseTile();
            //        tileList2Current = tileList2Current.Next;
            //        tileList2Current.Next = tileList1.First;
            //    }
            //    else
            //    {
            //        tileList2Current.Next.Value = null;
            //        tileList2Current = tileList2Current.Next;
            //    }
            //}
        }

	    public void TestLists()
	    {
	        foreach (var tile in tileList0)
	        {
                Console.WriteLine(tile.icon);
            }
	        
	    }
	}
}

